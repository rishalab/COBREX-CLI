digraph cluster {
	graph [label=test]
	1 [label="100-main-paragraph .
 
"]
	2 [label="perform 200-opening-screen
"]
	4 [label="perform 300-pulley1-data-entry
"]
	17 [label="perform 400-pulley2-data-entry
"]
	65 [label="perform 500-pulley-distance-data-entry
"]
	108 [label="perform 600-calculate-it
"]
	151 [label="perform 700-display-results
"]
	157 [label="perform 999-end-program
"]
	38 [label="999-end-program .
 
"]
	39 [label="display spaces
"]
	40 [label="display \"***** BELT LENGTH CALCULATOR UTILITY ENDS *****\"
"]
	41 [label="display spaces
"]
	42 [label="stop run
"]
	41 -> 42 [label="sequential next"]
	40 -> 41 [label="sequential next"]
	39 -> 40 [label="sequential next"]
	38 -> 39 [label="sequential next"]
	157 -> 38 [label="procedure call"]
	151 -> 157 [label="perform-exit"]
	158 [label="700-display-results .
 
"]
	159 [label="move belt-length to belt-length-out
"]
	160 [label="display \"Belt Length: \" belt-length-out
"]
	159 -> 160 [label="sequential next"]
	158 -> 159 [label="sequential next"]
	151 -> 158 [label="procedure call"]
	108 -> 151 [label="perform-exit"]
	152 [label="600-calculate-it .
 
"]
	153 [label="compute belt-length rounded = function pi * ( pulley-diameter1 + pulley-diameter2 ) * 0.5 + ( pulley-distance * 2 ) + ( function abs ( pulley-diameter2 - pulley-diameter1 ) ** 2 / ( pulley-distance * 4 ) )
"]
	152 -> 153 [label="sequential next"]
	108 -> 152 [label="procedure call"]
	65 -> 108 [label="perform-exit"]
	109 [label="500-pulley-distance-data-entry .
 
"]
	110 [label="move \"pulley distance\" to description
"]
	111 [label="display \"Enter \" description \": \" with no advancing
"]
	112 [label="accept pulley-distance-in
"]
	113 [label="if function test-numval ( pulley-distance-in ) IS NOT EQUAL ZERO
"]
	114 [label="display \"Previous \" description not-numeric
"]
	117 [label="perform 500-pulley-distance-data-entry
"]
	117 -> 109 [label="procedure call"]
	114 -> 117 [label="sequential next"]
	113 -> 114 [label=true]
	116 [label="compute pulley-distance = function numval ( pulley-distance-in )
"]
	113 -> 116 [label=false]
	121 [label="evaluate true
"]
	122 [label="when pulley-distance IS EQUAL ZERO
"]
	124 [label="perform 999-end-program
"]
	124 -> 38 [label="procedure call"]
	122 -> 124 [label=true]
	125 [label="when pulley-distance IS NEGATIVE
"]
	131 [label="display quantity-too-small
"]
	134 [label="perform 500-pulley-distance-data-entry
"]
	134 -> 109 [label="procedure call"]
	131 -> 134 [label="sequential next"]
	125 -> 131 [label=true]
	132 [label="when pulley-distance > 99999.9
"]
	139 [label="display quantity-too-much
"]
	142 [label="perform 500-pulley-distance-data-entry
"]
	142 -> 109 [label="procedure call"]
	139 -> 142 [label="sequential next"]
	132 -> 139 [label=true]
	125 -> 132 [label=false]
	122 -> 125 [label=false]
	121 -> 122 [label="evaluate when"]
	113 -> 121 [label="sequential next"]
	112 -> 113 [label="sequential next"]
	111 -> 112 [label="sequential next"]
	110 -> 111 [label="sequential next"]
	109 -> 110 [label="sequential next"]
	65 -> 109 [label="procedure call"]
	17 -> 65 [label="perform-exit"]
	66 [label="400-pulley2-data-entry .
 
"]
	67 [label="move \"pulley #2 diameter\" to description
"]
	68 [label="display \"Enter \" description \": \" with no advancing
"]
	69 [label="accept pulley-diameter2-in
"]
	70 [label="if function test-numval ( pulley-diameter2-in ) IS NOT EQUAL ZERO
"]
	71 [label="display \"Previous \" description not-numeric
"]
	74 [label="perform 400-pulley2-data-entry
"]
	74 -> 66 [label="procedure call"]
	71 -> 74 [label="sequential next"]
	70 -> 71 [label=true]
	73 [label="compute pulley-diameter2 = function numval ( pulley-diameter2-in )
"]
	70 -> 73 [label=false]
	78 [label="evaluate true
"]
	79 [label="when pulley-diameter2 IS EQUAL ZERO
"]
	81 [label="perform 999-end-program
"]
	81 -> 38 [label="procedure call"]
	79 -> 81 [label=true]
	82 [label="when pulley-diameter2 IS NEGATIVE
"]
	88 [label="display quantity-too-small
"]
	91 [label="perform 400-pulley2-data-entry
"]
	91 -> 66 [label="procedure call"]
	88 -> 91 [label="sequential next"]
	82 -> 88 [label=true]
	89 [label="when pulley-diameter2 > 99999.9
"]
	96 [label="display quantity-too-much
"]
	99 [label="perform 400-pulley2-data-entry
"]
	99 -> 66 [label="procedure call"]
	96 -> 99 [label="sequential next"]
	89 -> 96 [label=true]
	82 -> 89 [label=false]
	79 -> 82 [label=false]
	78 -> 79 [label="evaluate when"]
	70 -> 78 [label="sequential next"]
	69 -> 70 [label="sequential next"]
	68 -> 69 [label="sequential next"]
	67 -> 68 [label="sequential next"]
	66 -> 67 [label="sequential next"]
	17 -> 66 [label="procedure call"]
	4 -> 17 [label="perform-exit"]
	18 [label="300-pulley1-data-entry .
 
"]
	19 [label="move \"pulley #1 diameter\" to description
"]
	20 [label="display \"Enter \" description \": \" with no advancing
"]
	21 [label="accept pulley-diameter1-in
"]
	22 [label="if function test-numval ( pulley-diameter1-in ) IS NOT EQUAL ZERO
"]
	23 [label="display \"Previous \" description not-numeric
"]
	26 [label="perform 300-pulley1-data-entry
"]
	26 -> 18 [label="procedure call"]
	23 -> 26 [label="sequential next"]
	22 -> 23 [label=true]
	25 [label="compute pulley-diameter1 = function numval ( pulley-diameter1-in )
"]
	22 -> 25 [label=false]
	30 [label="evaluate true
"]
	31 [label="when pulley-diameter1 IS EQUAL ZERO
"]
	33 [label="perform 999-end-program
"]
	33 -> 38 [label="procedure call"]
	31 -> 33 [label=true]
	34 [label="when pulley-diameter1 IS NEGATIVE
"]
	45 [label="display quantity-too-small
"]
	48 [label="perform 300-pulley1-data-entry
"]
	48 -> 18 [label="procedure call"]
	45 -> 48 [label="sequential next"]
	34 -> 45 [label=true]
	46 [label="when pulley-diameter1 > 99999.9
"]
	53 [label="display quantity-too-much
"]
	56 [label="perform 300-pulley1-data-entry
"]
	56 -> 18 [label="procedure call"]
	53 -> 56 [label="sequential next"]
	46 -> 53 [label=true]
	34 -> 46 [label=false]
	31 -> 34 [label=false]
	30 -> 31 [label="evaluate when"]
	22 -> 30 [label="sequential next"]
	21 -> 22 [label="sequential next"]
	20 -> 21 [label="sequential next"]
	19 -> 20 [label="sequential next"]
	18 -> 19 [label="sequential next"]
	4 -> 18 [label="procedure call"]
	2 -> 4 [label="perform-exit"]
	5 [label="200-opening-screen .
 
"]
	6 [label="display spaces
"]
	7 [label="display \"***** BELT LENGTH CALCULATOR UTILITY BEGINS *****\"
"]
	8 [label="display \"Written by, Clifford A. Chipman, EMIT\"
"]
	9 [label="display \"June 25, 2021\"
"]
	10 [label="display spaces
"]
	11 [label="display \"in Enterprise COBOL v6.3 for z/OS\"
"]
	12 [label="display spaces
"]
	13 [label="display \"Enter zero for any parameter to end the program.\"
"]
	14 [label="display spaces
"]
	14 -> 2 [label="sequential next"]
	13 -> 14 [label="sequential next"]
	12 -> 13 [label="sequential next"]
	11 -> 12 [label="sequential next"]
	10 -> 11 [label="sequential next"]
	9 -> 10 [label="sequential next"]
	8 -> 9 [label="sequential next"]
	7 -> 8 [label="sequential next"]
	6 -> 7 [label="sequential next"]
	5 -> 6 [label="sequential next"]
	2 -> 5 [label="procedure call"]
	1 -> 2 [label="sequential next"]
}
