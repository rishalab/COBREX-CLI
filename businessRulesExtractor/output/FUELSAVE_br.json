{
  "business_rules": {
    "quantity-too-much": {
      "rule": "if oldeff > max-val\n",
      "id": 1,
      "exits": [
        {
          "target": {
            "rule": "display quantity-too-much\n",
            "id": 2,
            "exits": []
          },
          "exitcase": "true"
        },
        {
          "target": {
            "rule": "if neweff > max-val\n",
            "id": 4,
            "exits": [
              {
                "target": {
                  "rule": "display quantity-too-much\n",
                  "id": 5,
                  "exits": []
                },
                "exitcase": "true"
              }
            ]
          },
          "exitcase": "false"
        }
      ]
    },
    "old-eff-out": {
      "rule": "move oldeff to old-eff-out\n",
      "id": 8,
      "exits": [
        {
          "target": {
            "rule": "display \"Old Efficiency: \" old-eff-out \"%\"\n",
            "id": 9,
            "exits": []
          },
          "exitcase": "sequential next"
        }
      ]
    },
    "pct-eff-out": {
      "rule": "move pcteff to pct-eff-out\n",
      "id": 11,
      "exits": [
        {
          "target": {
            "rule": "display \"Fuel Savings: \" pct-eff-out \"%\"\n",
            "id": 12,
            "exits": []
          },
          "exitcase": "sequential next"
        }
      ]
    },
    "new-eff-out": {
      "rule": "move neweff to new-eff-out\n",
      "id": 14,
      "exits": [
        {
          "target": {
            "rule": "display \"New Efficiency: \" new-eff-out \"%\"\n",
            "id": 15,
            "exits": []
          },
          "exitcase": "sequential next"
        }
      ]
    },
    "new-eff-in": { "rule": "accept new-eff-in\n", "id": 17, "exits": [] },
    "oldeff": {
      "rule": "if function test-numval ( old-eff-in ) IS NOT EQUAL ZERO\n",
      "id": 19,
      "exits": [
        {
          "target": {
            "rule": "compute oldeff = function numval ( old-eff-in )\n",
            "id": 21,
            "exits": [
              {
                "target": {
                  "rule": "if oldeff = 0\n",
                  "id": 22,
                  "exits": [
                    {
                      "target": {
                        "rule": "if oldeff < min-val\n",
                        "id": 24,
                        "exits": [
                          {
                            "target": {
                              "rule": "if oldeff > max-val\n",
                              "id": 26,
                              "exits": [
                                {
                                  "target": {
                                    "rule": "if neweff = oldeff\n",
                                    "id": 28,
                                    "exits": [
                                      {
                                        "target": {
                                          "rule": "if neweff < oldeff\n",
                                          "id": 30,
                                          "exits": [
                                            {
                                              "target": {
                                                "rule": "subtract oldeff from neweff giving numerator\n",
                                                "id": 32,
                                                "exits": [
                                                  {
                                                    "target": {
                                                      "rule": "move oldeff to old-eff-out\n",
                                                      "id": 33,
                                                      "exits": []
                                                    },
                                                    "exitcase": "sequential next"
                                                  }
                                                ]
                                              },
                                              "exitcase": "false"
                                            }
                                          ]
                                        },
                                        "exitcase": "false"
                                      }
                                    ]
                                  },
                                  "exitcase": "false"
                                }
                              ]
                            },
                            "exitcase": "false"
                          }
                        ]
                      },
                      "exitcase": "false"
                    }
                  ]
                },
                "exitcase": "sequential next"
              }
            ]
          },
          "exitcase": "false"
        }
      ]
    },
    "numerator": {
      "rule": "subtract oldeff from neweff giving numerator\n",
      "id": 35,
      "exits": [
        {
          "target": {
            "rule": "divide numerator by neweff giving pcteff rounded\n",
            "id": 36,
            "exits": []
          },
          "exitcase": "sequential next"
        }
      ]
    },
    "max-val": {
      "rule": "if oldeff > max-val\n",
      "id": 38,
      "exits": [
        {
          "target": { "rule": "if neweff > max-val\n", "id": 40, "exits": [] },
          "exitcase": "false"
        }
      ]
    },
    "min-val": {
      "rule": "if oldeff < min-val\n",
      "id": 43,
      "exits": [
        {
          "target": { "rule": "if neweff < min-val\n", "id": 45, "exits": [] },
          "exitcase": "false"
        }
      ]
    },
    "functiontest-numval(new-eff-in)": {
      "rule": "if function test-numval ( new-eff-in ) IS NOT EQUAL ZERO\n",
      "id": 48,
      "exits": []
    },
    "quantity-too-small": {
      "rule": "if oldeff < min-val\n",
      "id": 51,
      "exits": [
        {
          "target": {
            "rule": "display quantity-too-small\n",
            "id": 52,
            "exits": []
          },
          "exitcase": "true"
        },
        {
          "target": {
            "rule": "if neweff < min-val\n",
            "id": 54,
            "exits": [
              {
                "target": {
                  "rule": "display quantity-too-small\n",
                  "id": 55,
                  "exits": []
                },
                "exitcase": "true"
              }
            ]
          },
          "exitcase": "false"
        }
      ]
    },
    "quantity-lower1": {
      "rule": "if neweff < oldeff\n",
      "id": 58,
      "exits": [
        {
          "target": {
            "rule": "display quantity-lower1 quantity-lower2\n",
            "id": 59,
            "exits": []
          },
          "exitcase": "true"
        }
      ]
    },
    "pcteff": {
      "rule": "divide numerator by neweff giving pcteff rounded\n",
      "id": 62,
      "exits": [
        {
          "target": {
            "rule": "multiply 100 by pcteff\n",
            "id": 63,
            "exits": [
              {
                "target": {
                  "rule": "move pcteff to pct-eff-out\n",
                  "id": 64,
                  "exits": []
                },
                "exitcase": "sequential next"
              }
            ]
          },
          "exitcase": "sequential next"
        }
      ]
    },
    "quantities-equal1": {
      "rule": "if neweff = oldeff\n",
      "id": 66,
      "exits": [
        {
          "target": {
            "rule": "display quantities-equal1 quantities-equal2\n",
            "id": 67,
            "exits": []
          },
          "exitcase": "true"
        }
      ]
    },
    "neweff": {
      "rule": "if function test-numval ( new-eff-in ) IS NOT EQUAL ZERO\n",
      "id": 70,
      "exits": [
        {
          "target": {
            "rule": "compute neweff = function numval ( new-eff-in )\n",
            "id": 72,
            "exits": [
              {
                "target": {
                  "rule": "if neweff = 0\n",
                  "id": 73,
                  "exits": [
                    {
                      "target": {
                        "rule": "if neweff < min-val\n",
                        "id": 75,
                        "exits": [
                          {
                            "target": {
                              "rule": "if neweff > max-val\n",
                              "id": 77,
                              "exits": [
                                {
                                  "target": {
                                    "rule": "if neweff = oldeff\n",
                                    "id": 79,
                                    "exits": [
                                      {
                                        "target": {
                                          "rule": "if neweff < oldeff\n",
                                          "id": 81,
                                          "exits": [
                                            {
                                              "target": {
                                                "rule": "subtract oldeff from neweff giving numerator\n",
                                                "id": 83,
                                                "exits": [
                                                  {
                                                    "target": {
                                                      "rule": "divide numerator by neweff giving pcteff rounded\n",
                                                      "id": 84,
                                                      "exits": [
                                                        {
                                                          "target": {
                                                            "rule": "move neweff to new-eff-out\n",
                                                            "id": 85,
                                                            "exits": []
                                                          },
                                                          "exitcase": "sequential next"
                                                        }
                                                      ]
                                                    },
                                                    "exitcase": "sequential next"
                                                  }
                                                ]
                                              },
                                              "exitcase": "false"
                                            }
                                          ]
                                        },
                                        "exitcase": "false"
                                      }
                                    ]
                                  },
                                  "exitcase": "false"
                                }
                              ]
                            },
                            "exitcase": "false"
                          }
                        ]
                      },
                      "exitcase": "false"
                    }
                  ]
                },
                "exitcase": "sequential next"
              }
            ]
          },
          "exitcase": "false"
        }
      ]
    },
    "quantities-equal2": {
      "rule": "if neweff = oldeff\n",
      "id": 87,
      "exits": [
        {
          "target": {
            "rule": "display quantities-equal1 quantities-equal2\n",
            "id": 88,
            "exits": []
          },
          "exitcase": "true"
        }
      ]
    },
    "not-numeric": {
      "rule": "if function test-numval ( old-eff-in ) IS NOT EQUAL ZERO\n",
      "id": 91,
      "exits": [
        {
          "target": {
            "rule": "display \"Old Efficiency\" not-numeric\n",
            "id": 92,
            "exits": []
          },
          "exitcase": "true"
        },
        {
          "target": {
            "rule": "if function test-numval ( new-eff-in ) IS NOT EQUAL ZERO\n",
            "id": 94,
            "exits": [
              {
                "target": {
                  "rule": "display \"New Efficiency\" not-numeric\n",
                  "id": 95,
                  "exits": []
                },
                "exitcase": "true"
              }
            ]
          },
          "exitcase": "false"
        }
      ]
    },
    "old-eff-in": { "rule": "accept old-eff-in\n", "id": 98, "exits": [] },
    "functiontest-numval(old-eff-in)": {
      "rule": "if function test-numval ( old-eff-in ) IS NOT EQUAL ZERO\n",
      "id": 100,
      "exits": []
    },
    "quantity-lower2": {
      "rule": "if neweff < oldeff\n",
      "id": 103,
      "exits": [
        {
          "target": {
            "rule": "display quantity-lower1 quantity-lower2\n",
            "id": 104,
            "exits": []
          },
          "exitcase": "true"
        }
      ]
    }
  },
  "business_variables": [
    "quantity-too-much",
    "old-eff-out",
    "pct-eff-out",
    "new-eff-out",
    "new-eff-in",
    "oldeff",
    "numerator",
    "max-val",
    "min-val",
    "functiontest-numval(new-eff-in)",
    "quantity-too-small",
    "quantity-lower1",
    "pcteff",
    "quantities-equal1",
    "neweff",
    "quantities-equal2",
    "not-numeric",
    "old-eff-in",
    "functiontest-numval(old-eff-in)",
    "quantity-lower2"
  ]
}
